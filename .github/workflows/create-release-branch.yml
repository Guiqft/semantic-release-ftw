name: Create Release PR

on:
    workflow_dispatch:
        inputs:
            force-to-main:
                type: boolean
                default: false
                description: "Express Release: Enable this option for a streamlined and rapid release to the main branch, specially crafted for urgent production needs."

permissions:
    pull-requests: write
    contents: write

jobs:
    get-next-version:
        runs-on: ubuntu-latest
        steps:
            - name: Set Branch Name
              id: set-brach-name
              run: |
                  if [[ "${GITHUB_REF#refs/heads/}" == *"release/"* || "${{ github.event.inputs.force-to-main }}" == "true" ]]; then
                    echo "BRANCH_NAME=main" >> $GITHUB_OUTPUT
                  elif [ "${GITHUB_REF#refs/heads/}" == "dev" ]; then
                    echo "BRANCH_NAME=homolog" >> $GITHUB_OUTPUT
                  else 
                    echo "Invalid branch. Releases can only be triggered from 'dev' or 'release/*' branches."
                    exit 1
                  fi

            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  ref: ${{ steps.set-brach-name.outputs.BRANCH_NAME }}

            - name: Rebase
              run: |
                  git config user.name github-actions
                  git config user.email github-actions@github.com

                  git checkout origin/${GITHUB_REF#refs/heads/}
                  git rebase origin/${{ steps.set-brach-name.outputs.BRANCH_NAME }} -X ours --committer-date-is-author-date --reapply-cherry-picks
            - uses: oven-sh/setup-bun@v1
              with:
                  bun-version: latest

            - name: Install dependencies
              run: bun i

            - name: Discover Next Version
              id: get-next-version
              run: GITHUB_REF=${{ steps.set-brach-name.outputs.BRANCH_NAME }} bunx semantic-release --dry-run --no-ci
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        outputs:
            needs-release: ${{ steps.get-next-version.outputs.new-release-published }}
            new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}
            release-branch-name: ${{ steps.set-brach-name.outputs.BRANCH_NAME }}

    create-pr:
        runs-on: ubuntu-latest
        needs: get-next-version
        if: needs.get-next-version.outputs.needs-release == 'true'
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  ref: ${{ needs.get-next-version.outputs.release-branch-name }}

            - name: Set Release Branch
              id: set-release-branch
              run: |
                  RAW_VERSION=$(echo ${{ needs.get-next-version.outputs.new-release-version }} | sed 's/-.*$//')
                  echo "VERSION_BRANCH=release/v$RAW_VERSION" >> $GITHUB_OUTPUT

            - name: Create Release Branch
              run: |
                  VERSION_BRANCH=${{ steps.set-release-branch.outputs.VERSION_BRANCH }}

                  git config user.name github-actions
                  git config user.email github-actions@github.com

                  if git show-ref --quiet refs/heads/$VERSION_BRANCH; then
                    echo "Release branch $VERSION_BRANCH already exists. Skipping branch creation."
                  else
                    git checkout ${GITHUB_REF#refs/heads/}
                    git rebase origin/${{ needs.get-next-version.outputs.release-branch-name }} -X ours --committer-date-is-author-date --reapply-cherry-picks
                    
                    if [[ "${GITHUB_REF#refs/heads/}" != *"release/"* ]]; then
                      git branch -D $VERSION_BRANCH || true
                      git checkout -b $VERSION_BRANCH
                    fi
                    git push origin $VERSION_BRANCH -f
                  fi

            - name: Create Pull Request
              run: |
                  gh pr create \
                    --base ${{ needs.get-next-version.outputs.release-branch-name }} \
                    --head ${{ steps.set-release-branch.outputs.VERSION_BRANCH }} \
                    --title 'chore: release  v${{ needs.get-next-version.outputs.new-release-version }}' \
                    --body 'This PR was automatically created by Github Actions' \
                  || true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Close Previous Releases PRs
              run: |
                  gh pr list --json number,headRefName | jq -r '.[] | select(.headRefName | test("'"release/*"'")) | select(.headRefName != "${{ steps.set-release-branch.outputs.VERSION_BRANCH}}") | .number' | \
                  while read -r pr_number; do
                    gh pr close $pr_number --delete-branch
                  done
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
